plugins {
    id 'me.champeau.gradle.jmh' version '0.2.0'
    id "com.jfrog.bintray" version "1.6"
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'maven'
apply plugin: 'me.champeau.gradle.jmh'
apply plugin: 'maven'
apply plugin: 'maven-publish'

repositories {
    mavenCentral()
    jcenter()
}

bintray {
  user = System.getenv('BINTRAY_USER')
  key = System.getenv('BINTRAY_KEY')
  publications = ['CompletePublication']
  pkg {
    repo = 'maven'  // Yes, the repo is called maven. Super confusing.
    name = 'ml'
    userOrg = 'allenai'
    licenses = ['Apache-2.0']
    vcsUrl = 'https://github.com/allenai/ml.git'
    version {
      name = mlVersion
    }
  }  
}

publishing {
  publications {
    CompletePublication(MavenPublication) {
      from components.java
      groupId 'org.allenai'
      artifactId 'ml'
      version mlVersion 
    }
  }
}

test {
  useTestNG()
}

configurations {
  markdownDoclet
}

configurations {
    compileOnly
}

sourceSets {
    main {
        compileClasspath += configurations.compileOnly
    }
}

version = mlVersion
group = 'org.allenai'
sourceCompatibility = '1.8'
targetCompatibility = '1.8'

dependencies {
    compile 'org.slf4j:slf4j-simple:1.7.7'
    compile 'com.goldmansachs:gs-collections:6.1.0'
    compile 'args4j:args4j:2.32'

    // Only to be provided at compile, unnecessary for runtime
    compileOnly 'org.projectlombok:lombok:1.16.4'
    testCompile 'org.projectlombok:lombok:1.16.4'

    // TestNG for testing
    testCompile 'org.testng:testng:6.8.1'

    // Benchmarking - dependencies don't go into production jars
    jmh 'commons-io:commons-io:2.4'

    // To use Markdown instead of Javadoc HTML
    markdownDoclet 'ch.raffael.pegdown-doclet:pegdown-doclet:1.1.1'
}

idea {
    module{
        scopes.PROVIDED.plus += [configurations.compileOnly]
    }
}

jmh {
    jmhVersion = '1.3.2'
}

javadoc.options {
    docletpath = configurations.markdownDoclet.files.asType(List)
    doclet = "ch.raffael.doclets.pegdown.PegdownDoclet"
}

jacocoTestReport {
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['com/allenai/ml/sequences/crf/conll/**'])
        })
    }
}
